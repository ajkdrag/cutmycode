from typing import List, Protocol
from src.domain.types import UserId, SnippetId, CommentId
from src.domain.entities import (
    User,
    Snippet,
    SnippetDraft,
    CommentDraft,
    Comment,
    SnippetShareLinkDraft,
    SnippetShareLink,
)


class UserRepository(Protocol):
    def get(self, user_id: UserId) -> User | None: ...


class SnippetRepository(Protocol):
    def add(self, draft: SnippetDraft) -> Snippet: ...
    def get(self, snippet_id: SnippetId) -> Snippet | None: ...
    def update(self, snippet_id: SnippetId, draft: SnippetDraft) -> Snippet: ...


class CommentRepository(Protocol):
    def add(self, draft: CommentDraft) -> Comment: ...
    def get(self, comment_id: CommentId) -> Comment | None: ...
    def update(self, comment: Comment) -> None: ...
    def list_for_snippet(self, snippet_id: SnippetId) -> List[Comment]: ...
    def list_for_user(self, user_id: UserId) -> List[Comment]: ...


class LikeRepository(Protocol):
    def add(self, user_id: UserId, snippet_id: SnippetId) -> None: ...
    def delete(self, user_id: UserId, snippet_id: SnippetId) -> None: ...
    def is_liked(self, user_id: UserId, snippet_id: SnippetId) -> bool: ...
    def count_for_snippet(self, snippet_id: SnippetId) -> int: ...


class SnippetShareLinkRepository(Protocol):
    def add(self, draft: SnippetShareLinkDraft) -> SnippetShareLink: ...
    def get_by_token(self, token: str) -> SnippetShareLink | None: ...
    def deactivate_expired(self) -> None: ...
